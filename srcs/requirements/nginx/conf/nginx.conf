#EVENTS: spécifie les paramètres globaux pour la boucle d'événements NGINX qui gère la connexion et la communication entre les clients et le serveur. Est généralement utilisé pour spécifier le modèle d'événement que NGINX doit utiliser, comme "epoll" ou "kqueue".

#HTTP: spécifie les paramètres globaux pour le serveur HTTP NGINX. Contient les directives qui affectent le comportement du serveur pour toutes les requêtes HTTP entrantes.

#SERVER: définit les paramètres pour un serveur virtuel NGINX. Peut contenir plusieurs directives pour configurer les options de base du serveur. Dans l'exemple de configuration fourni, cette section définit les paramètres pour un serveur virtuel qui écoute sur le port HTTPS (443) et utilise SSL pour chiffrer les communications.

events{}

http {
	server {
		listen 443 ssl;
	
		server_name localhost;

		ssl_protocols TLSv1.2 TLSv1.3;
		ssl_certificate /etc/nginx/ssl/inception.crt;
		ssl_certificate_key /etc/nginx/ssl/inception.key;

		root /var/www/html/eleotard.42.fr;
		index index.php index.html index.htm;	
	
		location / {
			try_files $uri $uri/ = 404;
		}
	
		location ~ \.php$ {
		include snippets/fastcgi-php.conf;
		fastcgi_pass wordpress:9000;
		}
	}
}

#index: ordre des fichiers à rechercher dans le répertoire racine lorsque le client demande une ressource sans préciser de nom de fichier.		

#La configuration "location ~ .php$" dans Nginx permet de définir une zone où les fichiers PHP sont traités par le serveur. Cette configuration est basée sur l'expression régulière "~ .php$" qui indique que la chaîne de caractères ".php" doit être présente à la fin du nom de fichier.

#La directive "include snippets/fastcgi-php.conf;" inclut un fichier de configuration contenant des paramètres de FastCGI pour le traitement des fichiers PHP. Cela permet d'optimiser la configuration en réutilisant des paramètres déjà définis.

#Enfin, la directive "fastcgi_pass wordpress:9000;" indique au serveur Nginx de transmettre les requêtes PHP à un serveur FastCGI (dans ce cas, un conteneur WordPress) qui écoute sur le port 9000. Cette configuration est nécessaire pour que le serveur Nginx puisse interagir avec le serveur FastCGI et exécuter les scripts PHP demandés.

#En somme, cette configuration permet de diriger les requêtes PHP vers un serveur FastCGI exécutant dans un autre conteneur, ce qui permet de séparer les tâches et de mieux gérer les ressources du système. Cela permet également d'améliorer la sécurité en réduisant les risques liés à l'exécution de scripts PHP sur le serveur Web lui-même.
